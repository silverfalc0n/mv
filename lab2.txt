Task 1) Import libraries and color image. Perform some common point operations 
a) Image Negative 
b) Log-Transform 
c) Gamma Correction. Plot the responses and provide your inferences.

import cv2
import matplotlib.pyplot as plt
img = cv2.imread("airplane.png")
img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
gray = cv2.imread("airplane.png",0)
colored_negative = abs(255-img)
gray_negative = abs(255-gray)
imgs = [img, gray, colored_negative, gray_negative]
title = ['coloured', 'gray', 'coloured-negative', 'gray-negative']

plt.subplot(2, 2, 1)
plt.title(title[0])
plt.imshow(imgs[0])
plt.xticks([])
plt.yticks([])

plt.subplot(2, 2, 2)
plt.title(title[1])
plt.imshow(imgs[1], cmap='gray')
plt.xticks([])
plt.yticks([])

plt.subplot(2, 2, 3)
plt.title(title[2])
plt.imshow(imgs[2])
plt.xticks([])
plt.yticks([])

plt.subplot(2, 2, 4)
plt.title(title[3])
plt.imshow(imgs[3], cmap='gray')
plt.xticks([])
plt.yticks([])


plt.show()

# log transform
import numpy as np 

log_images = []
c_val = []
   
image = cv2.imread('airplane.png') 
   
c = 255 / np.log(1 + np.max(image)) 
log_image = c * (np.log(image + 1)) 
   
log_image = np.array(log_image, dtype = np.uint8) 
log_images.append(log_image)
c_val.append(c)


c = 255 / np.log(10000 + np.max(image)) 
log_image = c * (np.log(image + 1)) 
   
log_image = np.array(log_image, dtype = np.uint8) 
log_images.append(log_image)
c_val.append(c)


plt.subplot(2,2,1)
plt.title("Orignal")
plt.imshow(image)

plt.subplot(2,2,2)
plt.title(c_val[0])
plt.imshow(log_images[0])

plt.subplot(2,2,3)
plt.title(c_val[1])
plt.imshow(log_images[1])


plt.show() 

image = cv2.imread('airplane.png') 
image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
image = cv2.imread('airplane.png') 
image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
y = [1.0,1.2,1.28,0.9]

g_image1 =(image.copy()[:,:,])**y[0] 
g_image1 = np.array(g_image1, dtype = np.uint8) 
#print(image)

g_image2 =(image.copy())**y[1]
g_image2 = np.array(g_image2, dtype = np.uint8) 
#print("2",image)

g_image3 =(image.copy())**y[2]
g_image3 = np.array(g_image3, dtype = np.uint8) 
#print("3",image)

g_image4 =(image.copy())**y[3]
g_image4 = np.array(g_image4, dtype = np.uint8) 
#print("4",image)
plt.subplot(2,2,1)
plt.title(y[0])
plt.imshow(g_image1)

plt.subplot(2,2,2)
plt.title(y[1])
plt.imshow(g_image2)

plt.subplot(2,2,3)
plt.title(y[2])
plt.imshow(g_image3)

plt.subplot(2,2,4)
plt.title(y[3])
plt.imshow(g_image4)

   
plt.show() 


Task 2) 
Perform an operation on the image such that gray values < threshold is zero and > threshold is 255 (Image Binarization).

img = cv2.imread("airplane.png",0)

plt.imshow(img,'gray')
plt.show()
img
img_shape = img.shape
print(type(img_shape))
t = [125.0, 142.0, 111.0, 100.0]
def func(img, t):
    for i in range(img_shape[0]):
        for j in range (img_shape[1]):
            if img[i][j] > t:
                img[i][j] = 255
            elif img[i][j] < t:
                img[i][j] = 0
            
        
    return img

images = []
for i in range(4):
    images.append(func(img.copy(), t[i]))
images
plt.subplot(2,3,1)
plt.title("Orignal")
plt.imshow(img,'gray')

plt.subplot(2,3,2)
plt.title(t[0])
plt.imshow(images[0],'gray')

plt.subplot(2,3,3)
plt.title(t[1])
plt.imshow(images[1],'gray')

plt.subplot(2,3,4)
plt.title(t[2])
plt.imshow(images[2],'gray')

plt.subplot(2,3,5)
plt.title(t[3])
plt.imshow(images[3],'gray')

plt.show()



Task 3) Enhance the input gray image using contrast stretching method. 
Observe the output and also try to plot the histogram of the input and the processed image.  

img =  cv2.imread("airplane.png",0)
plt.imshow(img,cmap = "gray")
plt.show()
f_min = 0
f_max = 0


org_img = img.copy()

for i in range(len(img)):
    for j in range(len(img[0])):
        #img[i][j] = func(img,i,j,fmax,fmin)
        
        if img[i][j] < 100:
            img[i][j] = 1*img[i][j] + 0
            
        elif img[i][j]>=100 and img[i][j]<200:
            img[i][j] = 0.7*img[i][j] + 30
            
        else:
            img[i][j] = 1.3*img[i][j] -10
        
e_img = np.array(img, dtype = np.uint8) 
plt.subplot(2,2,1)
plt.title("Orignal")
plt.imshow(org_img,'gray')

plt.subplot(2,2,2)
plt.title("Enhanced")
plt.imshow(img,'gray')
histogram, bin_edges = np.histogram(org_img, bins=256, range=(0, 255))

plt.figure()
plt.title("Grayscale Histogram of orignal Image")
plt.xlabel("grayscale value")
plt.ylabel("pixel count")
plt.xlim([0.0, 255.0]) 

plt.plot(bin_edges[0:-1], histogram)  
histogram, bin_edges = np.histogram(img, bins=256, range=(0, 255))

plt.figure()
plt.title("Grayscale Histogram of Enhanced Image")
plt.xlabel("grayscale value")
plt.ylabel("pixel count")
plt.xlim([0.0, 255.0]) 

plt.plot(bin_edges[0:-1], histogram)  
