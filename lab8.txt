Task 1: Perform morphological erosion and dilation operation of an input image and observe the output. 
Use different structuring element and compare the morphological output.

Task 2: Perform segmentation of the COIN image using watershed algorithm. 
Prepare the input image suitable for watershed algorithm to work namely
a) conversion to binary
b) performing morphological operations to remove noises
c) determine the markers for initializing the seed point for the image. 
Finally display the segmented output namely coins in different colors.


import cv2
import numpy as np
import matplotlib.pyplot as plt
# Task 1: Morphological operations - Erosion and Dilation

# Read the input image
input_image = cv2.imread('image.jpg', 0)  # Read as grayscale
# Define structuring elements
kernel_square = np.ones((5,5), np.uint8)
kernel_ellipse = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5,5))
kernel_cross = cv2.getStructuringElement(cv2.MORPH_CROSS, (5,5))

# Perform erosion and dilation with different structuring elements
erosion_square = cv2.erode(input_image, kernel_square, iterations=1)
erosion_ellipse = cv2.erode(input_image, kernel_ellipse, iterations=1)
erosion_cross = cv2.erode(input_image, kernel_cross, iterations=1)
dilation_square = cv2.dilate(input_image, kernel_square, iterations=1)
dilation_ellipse = cv2.dilate(input_image, kernel_ellipse, iterations=1)
dilation_cross = cv2.dilate(input_image, kernel_cross, iterations=1)
plt.figure(figsize=(12, 8))

plt.subplot(3, 2, 1)
plt.imshow(input_image, cmap='gray')
plt.title('Original')

plt.subplot(3, 2, 2)
plt.imshow(erosion_square, cmap='gray')
plt.title('Erosion Square')

plt.subplot(3, 2, 3)
plt.imshow(erosion_ellipse, cmap='gray')
plt.title('Erosion Ellipse')

plt.subplot(3, 2, 4)
plt.imshow(erosion_cross, cmap='gray')
plt.title('Erosion Cross')

plt.subplot(3, 2, 5)
plt.imshow(dilation_square, cmap='gray')
plt.title('Dilation Square')

plt.subplot(3, 2, 6)
plt.imshow(dilation_ellipse, cmap='gray')
plt.title('Dilation Ellipse')

plt.tight_layout()
plt.show()

#Task2
# Read the input image
input_image = cv2.imread('image.jpg')
# Convert to grayscale
gray = cv2.cvtColor(input_image, cv2.COLOR_BGR2GRAY)
    
# Apply Gaussian blur to reduce noise
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Thresholding to create a binary image
_, thresh = cv2.threshold(blurred, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
# Perform morphological operations to remove noise
kernel = np.ones((5, 5), np.uint8)
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=2)
# Find sure background and sure foreground areas
sure_bg = cv2.dilate(opening, kernel, iterations=6)
dist_transform = cv2.distanceTransform(opening, cv2.DIST_L2, 5)
_, sure_fg = cv2.threshold(dist_transform, 0.9*dist_transform.max(), 255, 0)
# Find unknown region
sure_fg = np.uint8(sure_fg)
unknown = cv2.subtract(sure_bg, sure_fg)
# Marker labelling for watershed algorithm
_, markers = cv2.connectedComponents(sure_fg)
markers = markers + 1
markers[unknown == 255] = 0

# Apply watershed algorithm
markers = cv2.watershed(input_image, markers)
input_image[markers == -1] = [255, 0, 0]  # Mark watershed boundaries

# Display segmented output using Matplotlib
plt.figure(figsize=(8, 6))
plt.imshow(cv2.cvtColor(input_image, cv2.COLOR_BGR2RGB))
plt.title('Segmented Coins')
plt.axis('off')
plt.show()